#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–µ–π UPAK —Å OpenAI –Ω–∞ Yandex GPT

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python scripts/migration_control.py --stage 1  # –í–∫–ª—é—á–∏—Ç—å A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ 50/50
    python scripts/migration_control.py --stage 2  # –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ 75% –Ω–∞ Yandex GPT
    python scripts/migration_control.py --stage 3  # –ü–æ–ª–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –Ω–∞ Yandex GPT
    python scripts/migration_control.py --rollback # –û—Ç–∫–∞—Ç –Ω–∞ OpenAI
    python scripts/migration_control.py --status   # –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
"""

import argparse
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent.parent))

from app.core.config import settings

class MigrationController:
    """–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–µ–π"""
    
    def __init__(self):
        self.env_file = Path('.env')
        self.backup_file = Path('.env.backup')
    
    def backup_config(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        if self.env_file.exists():
            import shutil
            shutil.copy2(self.env_file, self.backup_file)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {self.backup_file}")
    
    def update_env_setting(self, key: str, value: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ .env —Ñ–∞–π–ª–µ"""
        if not self.env_file.exists():
            print(f"‚ùå –§–∞–π–ª {self.env_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        lines = []
        updated = False
        
        with open(self.env_file, 'r') as f:
            for line in f:
                if line.startswith(f"{key}="):
                    lines.append(f"{key}={value}\n")
                    updated = True
                else:
                    lines.append(line)
        
        if not updated:
            lines.append(f"{key}={value}\n")
        
        with open(self.env_file, 'w') as f:
            f.writelines(lines)
        
        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {key}={value}")
        return True
    
    def stage_1_ab_testing(self):
        """–≠–¢–ê–ü 1: –í–∫–ª—é—á–µ–Ω–∏–µ A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è 50/50"""
        print("üöÄ –≠–¢–ê–ü 1: –í–∫–ª—é—á–µ–Ω–∏–µ A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (50% OpenAI, 50% Yandex GPT)")
        self.backup_config()
        
        self.update_env_setting("ENABLE_AB_TESTING", "true")
        self.update_env_setting("YANDEX_GPT_RATIO", "0.5")
        self.update_env_setting("ENABLE_YANDEX_GPT", "true")
        self.update_env_setting("FALLBACK_TO_OPENAI", "true")
        
        print("‚úÖ A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.")
    
    def stage_2_increase_yandex(self):
        """–≠–¢–ê–ü 2: –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –¥–æ–ª–∏ Yandex GPT –¥–æ 75%"""
        print("üöÄ –≠–¢–ê–ü 2: –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –¥–æ–ª–∏ Yandex GPT –¥–æ 75%")
        self.backup_config()
        
        self.update_env_setting("ENABLE_AB_TESTING", "true")
        self.update_env_setting("YANDEX_GPT_RATIO", "0.75")
        self.update_env_setting("ENABLE_YANDEX_GPT", "true")
        self.update_env_setting("FALLBACK_TO_OPENAI", "true")
        
        print("‚úÖ –î–æ–ª—è Yandex GPT —É–≤–µ–ª–∏—á–µ–Ω–∞ –¥–æ 75%. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.")
    
    def stage_3_full_migration(self):
        """–≠–¢–ê–ü 3: –ü–æ–ª–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –Ω–∞ Yandex GPT"""
        print("üöÄ –≠–¢–ê–ü 3: –ü–æ–ª–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –Ω–∞ Yandex GPT (100%)")
        self.backup_config()
        
        self.update_env_setting("ENABLE_AB_TESTING", "false")
        self.update_env_setting("YANDEX_GPT_RATIO", "1.0")
        self.update_env_setting("ENABLE_YANDEX_GPT", "true")
        self.update_env_setting("FALLBACK_TO_OPENAI", "true")
        
        print("‚úÖ –ü–æ–ª–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –Ω–∞ Yandex GPT –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.")
    
    def rollback_to_openai(self):
        """–û—Ç–∫–∞—Ç –Ω–∞ OpenAI"""
        print("üîÑ –û–¢–ö–ê–¢: –í–æ–∑–≤—Ä–∞—Ç –∫ OpenAI")
        
        if self.backup_file.exists():
            import shutil
            shutil.copy2(self.backup_file, self.env_file)
            print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ {self.backup_file}")
        else:
            self.update_env_setting("ENABLE_AB_TESTING", "false")
            self.update_env_setting("YANDEX_GPT_RATIO", "0.0")
            self.update_env_setting("ENABLE_YANDEX_GPT", "false")
            self.update_env_setting("FALLBACK_TO_OPENAI", "true")
            print("‚úÖ –û—Ç–∫–∞—Ç –∫ OpenAI –≤—ã–ø–æ–ª–Ω–µ–Ω")
        
        print("‚ö†Ô∏è  –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π.")
    
    def show_status(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–∏"""
        print("üìä –¢–ï–ö–£–©–ò–ô –°–¢–ê–¢–£–° –ú–ò–ì–†–ê–¶–ò–ò")
        print("=" * 40)
        
        try:
            from app.core.config import Settings
            current_settings = Settings()
            
            print(f"A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {'‚úÖ –í–∫–ª—é—á–µ–Ω–æ' if current_settings.ENABLE_AB_TESTING else '‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ'}")
            print(f"Yandex GPT –≤–∫–ª—é—á–µ–Ω: {'‚úÖ –î–∞' if current_settings.ENABLE_YANDEX_GPT else '‚ùå –ù–µ—Ç'}")
            print(f"–î–æ–ª—è Yandex GPT: {current_settings.YANDEX_GPT_RATIO * 100:.0f}%")
            print(f"Fallback –Ω–∞ OpenAI: {'‚úÖ –í–∫–ª—é—á–µ–Ω' if current_settings.FALLBACK_TO_OPENAI else '‚ùå –í—ã–∫–ª—é—á–µ–Ω'}")
            print(f"Yandex credentials: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã' if current_settings.YANDEX_GPT_API_KEY else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã'}")
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–ø–∞
            if not current_settings.ENABLE_YANDEX_GPT:
                stage = "–ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (—Ç–æ–ª—å–∫–æ OpenAI)"
            elif current_settings.ENABLE_AB_TESTING and current_settings.YANDEX_GPT_RATIO == 0.5:
                stage = "–≠–¢–ê–ü 1: A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ 50/50"
            elif current_settings.ENABLE_AB_TESTING and current_settings.YANDEX_GPT_RATIO == 0.75:
                stage = "–≠–¢–ê–ü 2: 75% Yandex GPT"
            elif not current_settings.ENABLE_AB_TESTING and current_settings.YANDEX_GPT_RATIO == 1.0:
                stage = "–≠–¢–ê–ü 3: –ü–æ–ª–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –Ω–∞ Yandex GPT"
            else:
                stage = "–ö–∞—Å—Ç–æ–º–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"
            
            print(f"\nüéØ –¢–µ–∫—É—â–∏–π —ç—Ç–∞–ø: {stage}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")

def main():
    parser = argparse.ArgumentParser(description='–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–µ–π UPAK AI Backend')
    parser.add_argument('--stage', type=int, choices=[1, 2, 3], help='–≠—Ç–∞–ø –º–∏–≥—Ä–∞—Ü–∏–∏ (1-3)')
    parser.add_argument('--rollback', action='store_true', help='–û—Ç–∫–∞—Ç –∫ OpenAI')
    parser.add_argument('--status', action='store_true', help='–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å')
    
    args = parser.parse_args()
    controller = MigrationController()
    
    if args.stage == 1:
        controller.stage_1_ab_testing()
    elif args.stage == 2:
        controller.stage_2_increase_yandex()
    elif args.stage == 3:
        controller.stage_3_full_migration()
    elif args.rollback:
        controller.rollback_to_openai()
    elif args.status:
        controller.show_status()
    else:
        parser.print_help()

if __name__ == '__main__':
    main()